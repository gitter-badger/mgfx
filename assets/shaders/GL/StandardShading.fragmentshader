#version 330 core

// Take in a diffuse color map and a normal map
uniform sampler2D albedo_sampler;
uniform sampler2D normal_sampler;

// The camera position, light direction and if we have a normal map
uniform vec3 camera_pos;
uniform vec3 light_dir;
uniform bool has_normalmap;

// These values passed through from the vertex shader
in vec3 frag_pos_world;
in vec3 frag_normal;
in vec2 frag_tex_coord;

// The output color
out vec4 color;

// Given a surface normal and a normal map normal, calculate the pixel space normal
vec3 applyNormalMap(vec3 geomnor, vec3 normap)
{
    normap = normap * 2.0 - 1.0;
    vec3 up = normalize(vec3(0.001, 1, 0.001));
    vec3 surftan = normalize(cross(geomnor, up));
    vec3 surfbinor = cross(geomnor, surftan);
    return normalize(normap.y * surftan + normap.x * surfbinor + normap.z * geomnor);
}

// A quick and dirty light calculation.  Surfaces are 'blue-ish' on top 
// and red-ish on the bottom, simply by blending the normal y direction with colors
vec3 CalcAmbient(vec3 normal)
{
    vec3 AmbientDown = vec3(.18f, .12f, .11f);
    vec3 AmbientUp = vec3(.87f, .9f, 1.0);
    return mix(AmbientDown, AmbientUp, normal.y * .5 + .5);
}

void main()
{
    // Sample the diffuse map
    vec4 diffuse = texture(albedo_sampler, frag_tex_coord).rgba;

    // Sample the normal map
    vec3 normal;
    if (has_normalmap)
    {
        normal = applyNormalMap(frag_normal, texture(normal_sampler, frag_tex_coord).rgb);
    }
    else
    {
        normal = frag_normal;
    }

    // Do a simple ambient light calculation
    vec3 illuminance = CalcAmbient(normal) * diffuse.rgb;

    // Implement a 'highlight' spotlight facing away from the viewer
    vec3 light_pos = camera_pos;

    // Light vector.
    vec3 L = light_pos - frag_pos_world;
    
    // Normalize light vector.
    L = normalize(L);

    // cone fall-off 
    float cosDir = max(dot(L, -light_dir), 0.0f);
    float spotEffect = pow(cosDir, 20) * .6f; 
   
    // Brightness 
    float lambertian = max(dot(L, normal), 0.0);
    if(lambertian > 0.0)
    {
        // Specular
        vec3 viewDir = normalize(camera_pos - frag_pos_world);
        vec3 halfDir = normalize(L + viewDir);
        float specAngle = max(dot(halfDir, normal), 0.0);
        float specular = pow(specAngle, 36.0) * .2f;  

        // Final lighting calculation: diffuse + specular
        illuminance += 1.0f * spotEffect * (lambertian * diffuse.rgb + specular);
    }

    color =  vec4(illuminance, diffuse.a);
}