#version 330 core

// Take in a diffuse color map and a normal map
uniform sampler2D albedo_sampler;
uniform sampler2D normal_sampler;

// The camera position, light direction and if we have a normal map
uniform vec3 camera_pos;
uniform vec3 light_dir;
uniform bool has_normalmap;

// These values passed through from the vertex shader
in vec3 frag_pos_world;
in vec3 frag_normal;
in vec2 frag_tex_coord;

// The output color
out vec4 color;

// A quick and dirty light calculation.  Surfaces are 'blue-ish' on top 
// and red-ish on the bottom, simply by blending the normal y direction with colors
vec3 CalcAmbient(vec3 normal)
{
    vec3 AmbientDown = vec3(.18f, .12f, .11f);
    vec3 AmbientUp = vec3(.87f, .9f, 1.0);
    return mix(AmbientDown, AmbientUp, normal.y * .5 + .5);
}

mat3 cotangent_frame( vec3 N, vec3 p, vec2 uv )
{
    // get edge vectors of the pixel triangle
    vec3 dp1 = dFdx( p );
    vec3 dp2 = dFdy( p );
    vec2 duv1 = dFdx( uv );
    vec2 duv2 = dFdy( uv );
 
    // solve the linear system
    vec3 dp2perp = cross( dp2, N );
    vec3 dp1perp = cross( N, dp1 );
    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
    // construct a scale-invariant frame 
    float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
    return mat3( T * invmax, B * invmax, N );
}

vec3 perturb_normal( vec3 N, vec3 V, vec2 texcoord )
{
    // assume N, the interpolated vertex normal and 
    // V, the view vector (vertex to eye)
    vec3 map = texture( normal_sampler, texcoord ).xyz * 2.0f - 1.0f;
    mat3 TBN = cotangent_frame( N, -V, texcoord );
    return normalize( TBN * map );
}

void main()
{
    // Sample the diffuse map
    vec4 diffuse = texture(albedo_sampler, frag_tex_coord).rgba;

    // Sample the normal map
    vec3 normal;
    if (has_normalmap)
    {
        normal = perturb_normal(frag_normal, frag_pos_world, frag_tex_coord);
    }
    else
    {
        normal = frag_normal;
    }

    // Do a simple ambient light calculation
    vec3 illuminance = CalcAmbient(normal) * diffuse.rgb;

    // Implement a 'highlight' spotlight facing away from the viewer
    vec3 light_pos = camera_pos;

    // Light vector.
    vec3 L = light_pos - frag_pos_world;
    
    // Normalize light vector.
    L = normalize(L);

    // cone fall-off 
    float cosDir = max(dot(L, -light_dir), 0.0f);
    float spotEffect = pow(cosDir, 20) * .6f; 
   
    // Brightness 
    float lambertian = max(dot(L, normal), 0.0);
    if(lambertian > 0.0)
    {
        // Specular
        vec3 viewDir = normalize(camera_pos - frag_pos_world);
        vec3 halfDir = normalize(L + viewDir);
        float specAngle = max(dot(halfDir, normal), 0.0);
        float specular = pow(specAngle, 36.0) * .8f;  

        // Final lighting calculation: diffuse + specular
        illuminance += 1.0f * spotEffect * (lambertian * diffuse.rgb + specular);
    }

    //vec2 col = frag_tex_coord * .5 + .5;
    //color = vec4(col.x, col.y, 0.0f, 1.0f); 
    color = vec4(illuminance, diffuse.a);
    //color = vec4(normal * .50f + .5f, 1.0f);
}